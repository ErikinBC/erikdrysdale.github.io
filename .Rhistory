-0.7 + 0.2*v - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
-0.7 - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2  + 0.67*v^4
100/1.068
4/(1+s0) + 104*(1/(1+1.068))**2
4/(1+s0) + 104*(1/(1+1.068))**2
4/(1+s0) + 104*(1/(1+0.068))**2
4/(1+s0) + 104*(1/(1+0.068))**2
4/(1+s0) + 104*(1/(1+0.0657))**2
4/(1+s0) + 104*(1/(1+0.2625))**2
s12 <- (1+0.02625)**2/(1+s0)-1
100/(1+s12)
s1 = 12.36/100
4/(1+s0) + 104*(1/(1+s1))**2
s12 <- (1+s1)**2/(1+s0)-1
100/(1+s12)
-1.42 - 4.28 - 1.82 - 1.20 - 3.57)/5
(-1.42 - 4.28 - 1.82 - 1.20 - 3.57)/5
(-1.42 - 4.28 + 1.82 - 1.20 - 3.57)/5
(1.81^2+1.80^2+1.88^2+2.13^2+2.86^2)/25
sqrt((1.81^2+1.80^2+1.88^2+2.13^2+2.86^2)/25)
-1.73+2*0.9542
-1.73-2*0.9542
?predict.glm
pnorm(1.5)
ll <- c('dplyr','magrittr','tidyr','ggplot2','cowplot','ggrepel','GGally','broom','stringr','scales')
sapply(ll,function(l) require(l,character.only = T))
load('C:/Users/erikinwest/Documents/Computational/R/craigslist_rent/vt_ols_data.RData')
norm.dat <- vt.ols.data %>% dplyr::select(price,ft2,distance) %>% scale %>% tbl_df
# OLS
reg <- lm(price~.-1,data=norm.dat)
beta <- reg %>% coefficients
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3)
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = 0
# Create grid
b1 <- seq(-0.5,1,length.out = 250)
b2 <- seq(-1,0.5,length.out = 250)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
gamma <- circle(0.5) %>% tbl_df
circle <- function(r,x0=0,y0=0){
points <- seq(0,2*pi,length.out=100)
# Euclidian distance to the origin
x <- r*cos(points) + x0
y <- r*sin(points) + y0
# Return
return(data.frame(x,y))
}
# Constraint circle
gamma <- circle(0.5) %>% tbl_df
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3)
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
gg.cont + geom_text_repel(aes(x=0,y=0,label='test'))
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='test'))
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='test'),inherit.aes = F)
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label="beta[1]^2 * '+'"),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2"),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),,inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"))
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"))
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=4)
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
b1 <- seq(-0.5,1,length.out = 500)
b2 <- seq(-1,0.5,length.out = 500)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
dim(B)
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
dev.off()
lam1 <- ggplot(dat.lam,aes(x=lam,y=gcv)) + geom_point(size=3) +
labs(x=expression(lambda),y='GCV') +
ggtitle('Optimal regularization parameter') +
scale_x_continuous(breaks=seq(0,0.1,0.02))
?optim
## from optim
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = 10
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
# Plot
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
# Calculate coefficients
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = -1000
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
# Plot
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
?optim
beta
# function
fr <- function(x,a=a,b=b,c=c,d=d,e=e,g=0.5) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
# gradient
grr <- function(x,a=a,b=b,c=c,d=d,e=e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
optim(beta,fr,grr,method='BFGS')
fr(beta)
fr <- function(x,a,b,c,d,e,g) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
fr(beta,1,2,3,4,5,0.5)
fr(as.numeric(beta),1,2,3,4,5,0.5)
fr <- function(x,a,b,c,d,e,g) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
a
e
optim(beta,fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e,g=0.5)
fr(as.numeric(beta),a=a,b=b,c=c,d=d,e=e,g=0.5)
fr(as.numeric(beta),a=a,b=b,c=c,d=d,e=e,g=0.5)
B
B$z %>% min
optim(as.numeric(beta),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e,g=0.5)
x1 <- x[1]
x2 <- x[2]
x1
x2
(a-1)
(a-1)*(x1*x1)
(a-1)*(x1*x1) + b*(x1*x2)
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2)
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
# function
fr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + 0.5
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
optim(as.numeric(beta),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
beta
reg
deviance(reg)
optim(c(beta,deviance(reg)),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
# function
fr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + (0.5-x3)
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e,
-1)
}
optim(c(beta,deviance(reg)),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
deviance(reg)
# Calculate coefficients
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = sum(price^2)
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
g
f
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
dev.off()
installed.packages()
rownames(installed.packages())=='openssl'
which(rownames(installed.packages())=='openssl')
installed.packages()[which(rownames(installed.packages())=='openssl'),]
Sys.getenv()[[]]
Sys.getenv()[['PATH']]
strsplit(Sys.getenv()[['PATH']],';')
# Clear up
rm(list=ls())
# Options
options(max.print = 75)
# Load in Bioconductor packages
ip <- rownames(installed.packages())
lb <- c('Biobase','BiocGenerics','parallel','AnnotationDbi','hgfocus.db','Homo.sapiens','GSE5859',
'affy','oligo','limma','genefilter')
source("https://bioconductor.org/biocLite.R")
# Check for updates
biocLite()
remove.packages('mgcv')
remove.packages('survival')
install.packages('survival')
installed.packages()[which(rownames(installed.packages())=='mgcv'),]
?remove.packages
remove.packages('mgcv',lib="C:/Program Files/R/R-3.3.2/library")
remove.packages(pkgs='mgcv',lib="C:/Program Files/R/R-3.3.2/library")
installed.packages()[which(rownames(installed.packages())=='survival'),]
installed.packages()[which(rownames(installed.packages())=='mgcv'),]
install.packages('mgcv')
# Clear up
rm(list=ls())
# Options
options(max.print = 75)
# Load in Bioconductor packages
ip <- rownames(installed.packages())
lb <- c('Biobase','BiocGenerics','parallel','AnnotationDbi','hgfocus.db','Homo.sapiens','GSE5859',
'affy','oligo','limma','genefilter')
source("https://bioconductor.org/biocLite.R")
# Check for updates
biocLite()
biocLite()
update.packages('openssl')
update.packages('jsonlite')
update.packages('jsonlite','C:\Users\erikinwest\Documents\R\win-library\3.3')
gsub('\','/','C:\Users\erikinwest\Documents\R\win-library\3.3')
'C:\Users\erikinwest\Documents\R\win-library\3.3'
C:/Users/erikinwest/Documents/R/win-library/3.3
Sys.getlocale()
"C:/Users/erikinwest/Documents/R/win-library/3.3"
update.packages("openssl","C:/Users/erikinwest/Documents/R/win-library/3.3")
biocLite()
Sys.getenv("PATH")
# Load in CRAN packages
ll <- c('tidyverse','magrittr','forcats','stringr','cowplot','broom','scales','reshape2','ggrepel')
for (k in ll) {
if(k %in% ip) { library(k,character.only=T)}
else { print(k) }
}
Sys.getenv("PATH")
Sys.getenv("PATH") %>% strsplit(';')
system('where make')
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
# setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
# path_site = getwd();dir_rmd = "_rmd";dir_md = "_posts"
# url_images = "figures/";out_ext='.md';in_ext='.rmd';recursive=FALSE
rm(list=ls())
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
# If any html calls, replace the src=figures/... with src=/figures/...
src.idx <- grep('src=',content,value=F)
if (length(src.idx)>0) {
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
} else {}
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
rmd2md()
# c1 <- 'black'
# g1 <- ggplot(gather(iris,var,val,-Species) %>% tbl_df,aes(x=val,y=..density..)) +
#   geom_density(aes(fill=Species),color=c1) + facet_wrap(~var)
#
# # Save data in a list
# rmd.list <- list(g1=g1,c1=c1)
# save(rmd.list,file='C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_rmd/rmd_data_test.RData')
# t1 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-batch_effects.md")
# t2 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-old_batch_effects.md")
#
# t1[which(!t1==t2)]
# t2[which(!t1==t2)]
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
library(affy)
?affy:mas5
?affy:mas5
rmd2md()
rmd2md()
