# Xd_res <- residuals(lm(X ~ d))
# xbhat <- as.vector(predict(cv.glmnet(x=Xd_res,y=yd_res),X,s='lambda.min'))
#
# yX_res <- y - as.vector(predict(cv.glmnet(x=X,y=y),X,s='lambda.min'))
# dX_res <- d - as.vector(predict(cv.glmnet(x=X,y=d),X,s='lambda.min'))
# that <- coef(lm(yX_res ~ -1 + dX_res))
#
# rsk.ls <- d*that + xbhat
# mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
# dhat.neyman <- that*coef(mdl.conv.neyman)[2]
# Store
simstore[ii,] <- c(dhat.naive, NA)
}
simstore <- data.table(simstore)
simstore <- melt(simstore,measure.vars = cn,variable.name='mdl',value='dhat')
simagg <- simstore[,list(mu=mean(dhat),med=median(dhat)),by=mdl]
simagg
simstore
nsim <- 250
cn <- c('naive','neyman')
simstore <- data.frame(matrix(NA,nrow=nsim,ncol=length(cn),dimnames=list(NULL,cn)))
n <- 100
p <- 100
s0 <- 5
t0 <- 0.5
b0 <- 0.5
g0 <- 0.5
library(glmnet)
for (ii in seq(nsim)) {
if (ii %% 5 == 0) print(sprintf('sim %i of %i',ii,nsim))
dat <- dgp.ydX(n=n,p=p,s0=s0,t0=t0,b0=b0,g0=g0,ss=ii)
y <- dat$y
dX <- as.matrix(dat[,-1])
d <- dat$d
X <- dX[,-1]
# naive
mdl.naive <- cv.glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)))
dhat.naive <- coef(mdl.naive,s='lambda.min')[-1][1]
# neyman: carry out a double FWL
mdl.dX <- cv.glmnet(x=dX,y=d,family='gaussian')
# Xd_res <- residuals(lm(X ~ d))
# xbhat <- as.vector(predict(cv.glmnet(x=Xd_res,y=yd_res),X,s='lambda.min'))
#
# yX_res <- y - as.vector(predict(cv.glmnet(x=X,y=y),X,s='lambda.min'))
# dX_res <- d - as.vector(predict(cv.glmnet(x=X,y=d),X,s='lambda.min'))
# that <- coef(lm(yX_res ~ -1 + dX_res))
#
# rsk.ls <- d*that + xbhat
# mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
# dhat.neyman <- that*coef(mdl.conv.neyman)[2]
# Store
simstore[ii,] <- c(dhat.naive, NA)
}
data.table(simstore)
simstore <- data.table(simstore)
melt(simstore,measure.vars = cn,variable.name='mdl',value='dhat')
simstore
simstore %>% apply(2,mean)
coef(mdl.naive,s='lambda.min')[-1]
# neyman: carry out a double FWL
yd_res <- residuals(lm(y ~ d))
Xd_res <- residuals(lm(X ~ d))
# bhat <-
coef(cv.glmnet(x=Xd_res,y=yd_res),X,s='lambda.min')
# bhat <-
coef(cv.glmnet(x=Xd_res,y=yd_res),X,s='lambda.min') %>% head
# bhat <-
coef(cv.glmnet(x=Xd_res,y=yd_res),X,s='lambda.min')[-1]
# neyman: carry out a double FWL
# bhat <-
coef(cv.glmnet(x=X,y=y),X,s='lambda.min')
# neyman: carry out a double FWL
# bhat <-
predict(cv.glmnet(x=X,y=y),newx=X,s='lambda.min')
# neyman: carry out a double FWL
xbhat1 <- as.vector(predict(cv.glmnet(x=X,y=y),newx=X,s='lambda.min'))
xghat1 <- as.vector(predict(cv.glmnet(x=X,y=d),newx=X,s='lambda.min'))
yX_res <- y - xbhat1
dX_res <- d - xghat1
dX_res
lm(yX_res ~ dX_res)
coef(lm(yX_res ~ dX_res))
coef(lm(yX_res ~ -1+dX_res))
that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
that*d
# Re-restimate the xbhat
y-that*d
# Re-restimate the xbhat
as.vector(predict(cv.glmnet(x=X,y=y-that*d),newx=X,s='lambda.min'))
# Re-restimate the xbhat
xbhat2 <- as.vector(predict(cv.glmnet(x=X,y=y-that*d),newx=X,s='lambda.min'))
plot(xbhat1, xbhat2)
rsk.ls <- d*that + xbhat2
mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
dhat.neyman <- that*coef(mdl.conv.neyman)[2]
dhat.neyman
dhat.naive
dhat.neyman
library(glmnet)
for (ii in seq(nsim)) {
if (ii %% 5 == 0) print(sprintf('sim %i of %i',ii,nsim))
dat <- dgp.ydX(n=n,p=p,s0=s0,t0=t0,b0=b0,g0=g0,ss=ii)
y <- dat$y
dX <- as.matrix(dat[,-1])
d <- dat$d
X <- dX[,-1]
# naive
mdl.naive <- cv.glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)))
dhat.naive <- coef(mdl.naive,s='lambda.min')[-1][1]
# neyman: carry out a double FWL
xbhat1 <- as.vector(predict(cv.glmnet(x=X,y=y),newx=X,s='lambda.min'))
xghat1 <- as.vector(predict(cv.glmnet(x=X,y=d),newx=X,s='lambda.min'))
yX_res <- y - xbhat1
dX_res <- d - xghat1
that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
xbhat2 <- as.vector(predict(cv.glmnet(x=X,y=y-that*d),newx=X,s='lambda.min'))
rsk.ls <- d*that + xbhat2
mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
dhat.neyman <- that*coef(mdl.conv.neyman)[2]
# Store
simstore[ii,] <- c(dhat.naive, dhat.neyman)
}
simstore <- data.table(simstore)
simstore %>% apply(2,mean)
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2)
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio = 0.1)
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio = 0.1) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio = 0.25) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio = 5) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.5) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.5,alpha=0.5) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.5,alpha=0) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.1,alpha=0) %>% coef
# naive
# mdl.naive <- cv.
glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0) %>% coef
# naive
# mdl.naive <- cv.
coef(glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
# naive
# mdl.naive <- cv.
param.naive <- coef(glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
param.naive[2]
param.naive['d']
dhat.naive <- param.naive['d']
# neyman: carry out a double FWL
coef(glmnet(x=X,y=y,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
# neyman: carry out a double FWL
cbind(1,X) %*% coef(glmnet(x=X,y=y,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
# neyman: carry out a double FWL
xbhat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=y,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
xghat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=d,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
yX_res <- y - xbhat1
dX_res <- d - xghat1
yX_res
hist(yX_res)
hist()
hist(xbhat1)
yX_res <- y - xbhat1
dX_res <- d - xghat1
that <- coef(lm(yX_res ~ -1+dX_res))
that
# Re-restimate the xbhat
xbhat2 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=y-d*that,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
plot(xhat1,xbhat2)
plot(xbhat1,xbhat2)
rsk.ls <- d*that + xbhat2
mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
dhat.neyman <- that*coef(mdl.conv.neyman)[2]
dhat.neyman
that
dhat.naive
rsk.ls <- d*that + xbhat1
mdl.conv.neyman <- glm(y ~ rsk.ls,family=binomial)
dhat.neyman <- that*coef(mdl.conv.neyman)[2]
dhat.neyman
# Re-restimate the xbhat
dX_res*(y - sigmoid(d*tt + xb))
tt=1
dX_res*(y - sigmoid(d*tt + xb))
rm(rr)
rm(tt)
# Re-restimate the xbhat
uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)
# Re-restimate the xbhat
uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
# Re-restimate the xbhat
dhat.neyman <- uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
for (ii in seq(nsim)) {
if (ii %% 5 == 0) print(sprintf('sim %i of %i',ii,nsim))
dat <- dgp.ydX(n=n,p=p,s0=s0,t0=t0,b0=b0,g0=g0,ss=ii)
y <- dat$y
dX <- as.matrix(dat[,-1])
d <- dat$d
X <- dX[,-1]
# naive
param.naive <- coef(glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
dhat.naive <- param.naive['d']
# neyman: carry out a double FWL
xbhat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=y,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
xghat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=d,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
yX_res <- y - xbhat1
dX_res <- d - xghat1
that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
dhat.neyman <- uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
# Store
simstore[ii,] <- c(dhat.naive, dhat.neyman)
}
simstore <- data.table(simstore)
simstore %>% apply(2,mean)
dhat.neyman
simstore
dhat.naive
dhat.neyman
# Store
simstore[ii,] <- c(dhat.naive, dhat.neyman)
nsim <- 250
cn <- c('naive','neyman')
simstore <- data.frame(matrix(NA,nrow=nsim,ncol=length(cn),dimnames=list(NULL,cn)))
n <- 100
p <- 100
s0 <- 5
t0 <- 0.5
b0 <- 0.5
g0 <- 0.5
library(glmnet)
for (ii in seq(nsim)) {
if (ii %% 5 == 0) print(sprintf('sim %i of %i',ii,nsim))
dat <- dgp.ydX(n=n,p=p,s0=s0,t0=t0,b0=b0,g0=g0,ss=ii)
y <- dat$y
dX <- as.matrix(dat[,-1])
d <- dat$d
X <- dX[,-1]
# naive
param.naive <- coef(glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
dhat.naive <- param.naive['d']
# neyman: carry out a double FWL
xbhat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=y,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
xghat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=d,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
yX_res <- y - xbhat1
dX_res <- d - xghat1
that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
dhat.neyman <- uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
# Store
simstore[ii,] <- c(dhat.naive, dhat.neyman)
}
simstore %>% apply(2,mean)
# neyman: carry out a double FWL
residuals(y~d)
# neyman: carry out a double FWL
residuals(lm(y~d))
residuals(lm(X~d))
# neyman: carry out a double FWL
ytil <- residuals(lm(y~d))
Xtil <- residuals(lm(X~d))
# neyman: carry out a double FWL
ytil <- residuals(lm(y~d))
Xtil <- residuals(lm(X~d))
xbhat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=Xtil,y=ytil,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
xghat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=d,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
yX_res <- y - xbhat1
dX_res <- d - xghat1
that <- coef(lm(yX_res ~ -1+dX_res))
that
# that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
dhat.neyman <- uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
dhat.neyman
for (ii in seq(nsim)) {
if (ii %% 5 == 0) print(sprintf('sim %i of %i',ii,nsim))
dat <- dgp.ydX(n=n,p=p,s0=s0,t0=t0,b0=b0,g0=g0,ss=ii)
y <- dat$y
dX <- as.matrix(dat[,-1])
d <- dat$d
X <- dX[,-1]
# naive
param.naive <- coef(glmnet(x=dX,y=y,family='binomial',penalty.factor=c(0,rep(1,p)),nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2]
dhat.naive <- param.naive['d']
# neyman: carry out a double FWL
ytil <- residuals(lm(y~d))
Xtil <- residuals(lm(X~d))
xbhat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=Xtil,y=ytil,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
xghat1 <- as.vector(cbind(1,X) %*% coef(glmnet(x=X,y=d,nlambda=2,lambda.min.ratio=0.01,alpha=0))[,2])
yX_res <- y - xbhat1
dX_res <- d - xghat1
# that <- coef(lm(yX_res ~ -1+dX_res))
# Re-restimate the xbhat
dhat.neyman <- uniroot(f=function(tt,e,y,d,xb) mean( e*(y - sigmoid(d*tt + xb)) ), interval=c(-10,10),
e=dX_res,y=y,d=d,xb=xbhat1)$root
# Store
simstore[ii,] <- c(dhat.naive, dhat.neyman)
}
simstore %>% apply(2,mean)
library(keras)
install_keras()
library(keras)
mnist <- dataset_mnist()
qq='Abatacept (Orencia)
Adalimumab (Humira)
Anakinra (Kineret)
Apremilast (Otezla)
Azathioprine (Imuran)
Belimumab (Benlysta)
Canakinumab
Celecoxib (Celebrex)
Certolizumab pegol (Cimzia)
Chloroquine (Aralen)
Diclofenac (Voltaren)
Diclofenac + Misoprostol (Arthrotec)
Esomeprazole magnesium +
Naproxen (Vimovo)
Etanercept (Enbrel)
Folic Acid
Gold sodium thiomalate
(Myochrysine)
Golimumab (Simponi)
Hydroxychloroquine (Plaquenil)
Ibuprofen (Motrin, Advil)
Indomethacin (Indocid)
Infliximab (Remicade)
Ketoprofen
Leflunomide (Arava)
Meloxicam
Mepacrine
Methotrexate
Methylprednisolone acetate (Depomedrol)
Mycophenolate mofetil (Cellcept)
Mycophenolate sodium (Myfortic)
Naproxen (Naprosyn)
Naproxen sodium (Aleve)
Prednisolone (Pediapred,
Orapred)
Prednisone
Rituximab (Rituxan)
Secukinumab (Cosentyx)
Sulfasalazine (Salazopyrine)
Tocilizumab (Actemra)
Tofacitinib (Xeljanz)
Triamcinolone (Kenalog)
Ustekinumab (Stelara)'
library(stringr)
str_split(qq,'\\n')
str_split(qq,'\\n')[[1]]
str_split(qq,'\\n')[[1]] -> qq
pckgs <- c('data.table','stringr')
for (pp in pckgs) library(pp, character.only = T)
rm(list=ls())
dir.base <- 'C:/Users/erikinwest/Downloads'
setwd(dir.base)
list.files()
list.files() %>% str_subset(.csv)
list.files() %>% str_subset('.csv')
df.raw <- fread("nanostring_experiment_rawval_mar22.csv")
# Load data
df.comp <- fread("nanostring_comparison_rawval_mar22.csv")
df.comp
df.comp[,1:4] %>% head
df.raw[,1:5] %>% head
df.raw[,1:5] %>% head
melt(df.raw,id.vars = c('CodeClass','Name'))
df.raw <- melt(df.raw,id.vars = c('CodeClass','Name'))
df.raw
df.raw[,`:=` (titre=str_split_fixed(variable,'_',2)[,1], id=str_split_fixed(variable,'_',2)[,2], variable=NULL)]
df.raw
df.raw[,list(mu=mean(value)),by=list(Name,titre)]
df.raw[,list(mu=mean(value)),by=list(Name,titre)][order(titre,mu)]
df.raw
df.raw[CodeClass=='Endogenoues']
df.raw[CodeClass=='Endogenous']
df.raw <- df.raw[CodeClass=='Endogenous']
length(unique(df.raw))
length(unique(df.raw$Name))
df.raw[,list(mu=mean(value)),by=list(Name,titre)][order(titre,mu)]
df.mu.raw <- df.raw[,list(mu=mean(value)),by=list(Name,titre)][order(titre,mu)]
df.mu.raw[titre=='200']
df.mu.raw[titre=='200']
df.mu.raw[titre=='200'] %>% head(10)
getwd()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/_rmd")
rm(list=ls())
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
# If any html calls, replace the src=figures/... with src=/figures/...
src.idx <- grep('src=',content,value=F)
if (length(src.idx)>0) {
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
} else {}
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
setwd("C:/Users/erikinwest/Documents/blogs/github/erikdrysdale.github.io/")
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
