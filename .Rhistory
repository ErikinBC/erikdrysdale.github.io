grep('20222',gene.names,value=T)
iris <- iris %>% tbl_df
# This script is for Assignment 7 for EPID 823
# Define needed packages
ll <- c('dplyr','magrittr','tidyr','ggplot2','cowplot','ggrepel','GGally','broom',
'stringr','reshape2','gridExtra','grid','sas7bdat')
sapply(ll,function(l) require(l,character.only = T))
library(mass)
library(MASS)
iris <- iris %>% tbl_df
iris
lda(Species~.,data=iris)
fit <- lda(Species~.,data=iris)
predict(fit)$class
fit
fit$scaling
fit %>% str
fit$scaling
fitted(fit)
predict(fit)
predict(fit) %>% st
predict(fit) %>% str
predict(fit)$x %>% head
iris
fitted <- predict(fit)$x
fitted$species <- iris$Species
fitted <- predict(fit)$x
fitted$species <- iris$Species
fitted %>% tbl_df
fitted <- predict(fit)$x
head(fitted)
fitted <- predict(fit)$x %>% tbl_df %>% mutate(Species=iris$Species)
fitted
fitted <- predict(fit)$x %>% tbl_df %>% mutate(Species=iris$Species)
ggplot(aes(x=LD1,y=LD2,color=Species)) + geom_point()
ggplot(fitted,aes(x=LD1,y=LD2,color=Species)) + geom_point()
ggplot(fitted,aes(x=LD1,y=LD2,color=Species)) + geom_point(size=4)
(100/95.2)-1
(100/95.12)-1
(100/89.00)**0.5-1
s0 <- (100/95.12)-1
s1 <- (100/89.00)**0.5-1
4/s0 + 104/s2**2
4/s0 + 104/s1**2
s1
4/s0 + 104/(1+s1)**2
4/s0 + 104/(1/(1+s1))**2
4/s0 + 104*(1/(1+s1))**2
4/(1+s0) + 104*(1/(1+s1))**2
(1+s1)**2/(1+s0)-1
s12 <- (1+s1)**2/(1+s0)-1
100/(1+s12)
v <- 1/1.06
-0.7 + 0.3*v - 0.2*v^2 + 0*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2 + 1*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
(7*6)/(5*80)
f1 <- function(i) { 0.7*(1+i) - 0.1*(1+6/12*i) + 0.2*(1+2/12*i) }
f1(0.105)
f1 <- function(i) { 0.7*(1+i) - 0.1*(1+6/12*i) + 0.2*(1+2/12*i) - 0.87 }
f1(0.105)
f1(0.1024)
f1(7*6/5/82)
7*6/5/82
(0.71/(1-0.3))*(0.65/(0.71-0.1))*(0.87/(0.65+0.2))-1
f2 <- function(i) { 0.7*(1+i) - 0.1*(1+i)**0.5 + 0.2*(1+i)**(1/6) -0.87 }
f2(c(0.0678,.1224,0.1025,0.0389))
f2 <- function(i) { 0.7*(1+i) - 0.1*(1+i)**0.5 + 0.2*(1+i)**(1/6) -0.87 }
f2(c(0.0678,.1224,0.1025,0.0389))
f2(c(0.0678,.1224,0.1025,0.0389)) %>% round(6)
round(f2(c(0.0678,.1224,0.1025,0.0389)))
round(f2(c(0.0678,.1224,0.1025,0.0389)),6)
-0.7 + 0.2*v - 0.2*v^2 + 0.3*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
(1/1.06)**0.25
(1/1.06)**0.75
4/(1+s0) + 104*(1/(1+0.068))**2
4/(1+s0) + 104*(1/(1+0.0618))**2
-0.7 + 0.3*v - 0.2*v^2 + 0*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
-0.7 - 0.2*v^2 + 0.1*v^3 + 0.67*v^4
-0.7 + 0.2*v - 0.2*v^2  + 0.67*v^4
100/1.068
4/(1+s0) + 104*(1/(1+1.068))**2
4/(1+s0) + 104*(1/(1+1.068))**2
4/(1+s0) + 104*(1/(1+0.068))**2
4/(1+s0) + 104*(1/(1+0.068))**2
4/(1+s0) + 104*(1/(1+0.0657))**2
4/(1+s0) + 104*(1/(1+0.2625))**2
s12 <- (1+0.02625)**2/(1+s0)-1
100/(1+s12)
s1 = 12.36/100
4/(1+s0) + 104*(1/(1+s1))**2
s12 <- (1+s1)**2/(1+s0)-1
100/(1+s12)
-1.42 - 4.28 - 1.82 - 1.20 - 3.57)/5
(-1.42 - 4.28 - 1.82 - 1.20 - 3.57)/5
(-1.42 - 4.28 + 1.82 - 1.20 - 3.57)/5
(1.81^2+1.80^2+1.88^2+2.13^2+2.86^2)/25
sqrt((1.81^2+1.80^2+1.88^2+2.13^2+2.86^2)/25)
-1.73+2*0.9542
-1.73-2*0.9542
?predict.glm
pnorm(1.5)
ll <- c('dplyr','magrittr','tidyr','ggplot2','cowplot','ggrepel','GGally','broom','stringr','scales')
sapply(ll,function(l) require(l,character.only = T))
load('C:/Users/erikinwest/Documents/Computational/R/craigslist_rent/vt_ols_data.RData')
norm.dat <- vt.ols.data %>% dplyr::select(price,ft2,distance) %>% scale %>% tbl_df
# OLS
reg <- lm(price~.-1,data=norm.dat)
beta <- reg %>% coefficients
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3)
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = 0
# Create grid
b1 <- seq(-0.5,1,length.out = 250)
b2 <- seq(-1,0.5,length.out = 250)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
gamma <- circle(0.5) %>% tbl_df
circle <- function(r,x0=0,y0=0){
points <- seq(0,2*pi,length.out=100)
# Euclidian distance to the origin
x <- r*cos(points) + x0
y <- r*sin(points) + y0
# Return
return(data.frame(x,y))
}
# Constraint circle
gamma <- circle(0.5) %>% tbl_df
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3)
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR')
gg.cont + geom_text_repel(aes(x=0,y=0,label='test'))
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='test'))
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='test'),inherit.aes = F)
gg.cont + geom_text_repel(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label='beta[1]^2'),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label="beta[1]^2 * '+'"),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2"),inherit.aes = F,parse=T)
gg.cont + geom_text(data=data.frame(x=0,y=0),,inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"))
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"))
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=4)
gg.cont + geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
b1 <- seq(-0.5,1,length.out = 500)
b2 <- seq(-1,0.5,length.out = 500)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
dim(B)
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
dev.off()
lam1 <- ggplot(dat.lam,aes(x=lam,y=gcv)) + geom_point(size=3) +
labs(x=expression(lambda),y='GCV') +
ggtitle('Optimal regularization parameter') +
scale_x_continuous(breaks=seq(0,0.1,0.02))
?optim
## from optim
fr <- function(x) {   ## Rosenbrock Banana function
x1 <- x[1]
x2 <- x[2]
100 * (x2 - x1 * x1)^2 + (1 - x1)^2
}
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = 10
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
# Plot
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
# Calculate coefficients
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = -1000
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
# Plot
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
?optim
beta
# function
fr <- function(x,a=a,b=b,c=c,d=d,e=e,g=0.5) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
# gradient
grr <- function(x,a=a,b=b,c=c,d=d,e=e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
optim(beta,fr,grr,method='BFGS')
fr(beta)
fr <- function(x,a,b,c,d,e,g) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
fr(beta,1,2,3,4,5,0.5)
fr(as.numeric(beta),1,2,3,4,5,0.5)
fr <- function(x,a,b,c,d,e,g) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
a
e
optim(beta,fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e,g=0.5)
fr(as.numeric(beta),a=a,b=b,c=c,d=d,e=e,g=0.5)
fr(as.numeric(beta),a=a,b=b,c=c,d=d,e=e,g=0.5)
B
B$z %>% min
optim(as.numeric(beta),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e,g=0.5)
x1 <- x[1]
x2 <- x[2]
x1
x2
(a-1)
(a-1)*(x1*x1)
(a-1)*(x1*x1) + b*(x1*x2)
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2)
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + g
# function
fr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + 0.5
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e)
}
optim(as.numeric(beta),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
beta
reg
deviance(reg)
optim(c(beta,deviance(reg)),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
# function
fr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
(a-1)*(x1*x1) + b*(x1*x2) + (c-1)*(x2*x2) + d*x1 + e*x2 + (0.5-x3)
}
# gradient
grr <- function(x,a,b,c,d,e) {
x1 <- x[1]
x2 <- x[2]
x3 <- x[3]
c(2*(a-1)*x1 + b*x2 + d,
2*(c-1)*x2 + b*x1 + e,
-1)
}
optim(c(beta,deviance(reg)),fr,grr,method='BFGS',a=a,b=b,c=c,d=d,e=e)
deviance(reg)
# Calculate coefficients
attach(norm.dat)
a = sum(ft2^2)
b = 2*sum(ft2*distance)
c = sum(distance^2)
d = -2*sum(ft2*price)
e = -2*sum(distance*price)
f = sum(price^2)
# Create grid
b1 <- seq(-0.5,1,length.out = 100)
b2 <- seq(-1,0.5,length.out = 100)
B <- expand.grid(b1,b2) %>% tbl_df %>% set_colnames(c('b1','b2'))
# And height
B <- B %>% mutate(z=a*b1^2 + b*b1*b2 + c*b2^2 + d*b1 + e*b2 + f)
g
f
gg.cont <-
ggplot(B,aes(x=b1,y=b2,z=z)) +
stat_contour(color='blue') +
geom_polygon(data=gamma,aes(x=x,y=y),fill='red',color='black',alpha=0.25,inherit.aes = F) +
geom_point(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y),color='red',size=4,inherit.aes = F) +
geom_text_repel(data=data.frame(x=beta[1],y=beta[2]),aes(x=x,y=y,label='OLS'),
color='red',size=4,inherit.aes = F,nudge_y = 0.3) +
labs(x=expression(beta[1]),y=expression(beta[2]),
subtitle='Blue lines show contour plots for given SSR') +
geom_text(data=data.frame(x=0,y=0),inherit.aes = F,parse=T,
aes(x=x,y=y,label="beta[1]^2 * '+' * beta[2]^2 * '=0.5'"),size=5)
gg.cont
dev.off()
installed.packages()
rownames(installed.packages())=='openssl'
which(rownames(installed.packages())=='openssl')
installed.packages()[which(rownames(installed.packages())=='openssl'),]
Sys.getenv()[[]]
Sys.getenv()[['PATH']]
strsplit(Sys.getenv()[['PATH']],';')
# Clear up
rm(list=ls())
# Options
options(max.print = 75)
# Load in Bioconductor packages
ip <- rownames(installed.packages())
lb <- c('Biobase','BiocGenerics','parallel','AnnotationDbi','hgfocus.db','Homo.sapiens','GSE5859',
'affy','oligo','limma','genefilter')
source("https://bioconductor.org/biocLite.R")
# Check for updates
biocLite()
remove.packages('mgcv')
remove.packages('survival')
install.packages('survival')
installed.packages()[which(rownames(installed.packages())=='mgcv'),]
?remove.packages
remove.packages('mgcv',lib="C:/Program Files/R/R-3.3.2/library")
remove.packages(pkgs='mgcv',lib="C:/Program Files/R/R-3.3.2/library")
installed.packages()[which(rownames(installed.packages())=='survival'),]
installed.packages()[which(rownames(installed.packages())=='mgcv'),]
install.packages('mgcv')
# Clear up
rm(list=ls())
# Options
options(max.print = 75)
# Load in Bioconductor packages
ip <- rownames(installed.packages())
lb <- c('Biobase','BiocGenerics','parallel','AnnotationDbi','hgfocus.db','Homo.sapiens','GSE5859',
'affy','oligo','limma','genefilter')
source("https://bioconductor.org/biocLite.R")
# Check for updates
biocLite()
biocLite()
update.packages('openssl')
update.packages('jsonlite')
update.packages('jsonlite','C:\Users\erikinwest\Documents\R\win-library\3.3')
gsub('\','/','C:\Users\erikinwest\Documents\R\win-library\3.3')
'C:\Users\erikinwest\Documents\R\win-library\3.3'
C:/Users/erikinwest/Documents/R/win-library/3.3
Sys.getlocale()
"C:/Users/erikinwest/Documents/R/win-library/3.3"
update.packages("openssl","C:/Users/erikinwest/Documents/R/win-library/3.3")
biocLite()
Sys.getenv("PATH")
# Load in CRAN packages
ll <- c('tidyverse','magrittr','forcats','stringr','cowplot','broom','scales','reshape2','ggrepel')
for (k in ll) {
if(k %in% ip) { library(k,character.only=T)}
else { print(k) }
}
Sys.getenv("PATH")
Sys.getenv("PATH") %>% strsplit(';')
system('where make')
source('~/bioeconometrician/github/erikdrysdale.github.io/rmd2md.R', echo=TRUE)
dev.off()
?gather
getwd()
?save
rmd.list <- list(g1=g1,c1=c1)
save(rmd.list,file='C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_rmd/rmd_data_test.RData')
c1 <- 'black'
g1 <- ggplot(gather(iris,var,val,-Species) %>% tbl_df,aes(x=val,y=..density..)) +
geom_density(aes(fill=Species,color=c1)) + facet_wrap(~var)
v1
c1
g
g1
dev.off()
g1
c1 <- 'black'
g1 <- ggplot(gather(iris,var,val,-Species) %>% tbl_df,aes(x=val,y=..density..)) +
geom_density(aes(fill=Species),color=c1) + facet_wrap(~var)
g1
dev.off()
iris %>% tbl_df %>% head(4)
rm(c1)
ls()
rm(list=c('g1','rmd.list'))
rmd2md()
# Clear up
rm(list=ls())
# Options
options(max.print = 75)
# Load in Bioconductor packages
ip <- rownames(installed.packages())
lb <- c('Biobase','BiocGenerics','parallel','AnnotationDbi','hgfocus.db','Homo.sapiens','GSE5859',
'affy','oligo','limma','genefilter','sva')
source("https://bioconductor.org/biocLite.R")
# Check for updates
biocLite()
dir <- 'C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_rmd/extra_batch_effects/'
setwd(dir)
source('~/bioeconometrician/github/erikdrysdale.github.io/_rmd/extra_batch_effects/batch_effects_script_for_blog.R', echo=TRUE)
source('~/bioeconometrician/github/erikdrysdale.github.io/_rmd/extra_batch_effects/batch_effects_script_for_blog.R', echo=TRUE)
rmd2md()
source('~/bioeconometrician/github/erikdrysdale.github.io/rmd2md.R', echo=TRUE)
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
rmd2md()
rmd2md()
rmd2md()
rmd2md()
getwd()
rmd2md()
