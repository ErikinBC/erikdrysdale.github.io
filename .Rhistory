geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Mean') + scale_fill_manual(name='',values=c("#00BFC4","#C77CFF")) +
theme(axis.title.x=element_blank(),legend.position=c(0.25,0.75))
p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Mean') + scale_fill_manual(name='',values=c("#00BFC4","#C77CFF")) +
theme(axis.title.x=element_blank(),legend.position=c(0.25,0.75))
rmd2md()
rmd2md()
getwd()
getwd()
rmd2md()
dev.off()
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
# setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
# path_site = getwd();dir_rmd = "_rmd";dir_md = "_posts"
# url_images = "figures/";out_ext='.md';in_ext='.rmd';recursive=FALSE
rm(list=ls())
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
# If any html calls, replace the src=figures/... with src=/figures/...
src.idx <- grep('src=',content,value=F)
if (length(src.idx)>0) {
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
} else {}
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
rmd2md()
# c1 <- 'black'
# g1 <- ggplot(gather(iris,var,val,-Species) %>% tbl_df,aes(x=val,y=..density..)) +
#   geom_density(aes(fill=Species),color=c1) + facet_wrap(~var)
#
# # Save data in a list
# rmd.list <- list(g1=g1,c1=c1)
# save(rmd.list,file='C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_rmd/rmd_data_test.RData')
# t1 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-batch_effects.md")
# t2 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-old_batch_effects.md")
#
# t1[which(!t1==t2)]
# t2[which(!t1==t2)]
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
# setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
# path_site = getwd();dir_rmd = "_rmd";dir_md = "_posts"
# url_images = "figures/";out_ext='.md';in_ext='.rmd';recursive=FALSE
rm(list=ls())
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
# If any html calls, replace the src=figures/... with src=/figures/...
src.idx <- grep('src=',content,value=F)
if (length(src.idx)>0) {
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
} else {}
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
rmd2md()
# c1 <- 'black'
# g1 <- ggplot(gather(iris,var,val,-Species) %>% tbl_df,aes(x=val,y=..density..)) +
#   geom_density(aes(fill=Species),color=c1) + facet_wrap(~var)
#
# # Save data in a list
# rmd.list <- list(g1=g1,c1=c1)
# save(rmd.list,file='C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_rmd/rmd_data_test.RData')
# t1 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-batch_effects.md")
# t2 <- readLines( "C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/_posts/2016-12-28-old_batch_effects.md")
#
# t1[which(!t1==t2)]
# t2[which(!t1==t2)]
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
path_site = getwd();dir_rmd = "_rmd";dir_md = "_posts"
url_images = "figures/";out_ext='.md';in_ext='.rmd';recursive=FALSE
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
f
files
f=files[2]
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
content <- readLines(file.path(path_site,dir_rmd,f))
content <- readLines(file.path(path_site,dir_rmd,f))
content
src.idx <- grep('src=',content,value=F)
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
length(src.idx)>0
src.idx
tail(content)
frontMatter <- which(substr(content, 1, 3) == '---')
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
status
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
?render_jekyll
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
rm(list=ls())
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
#dir_images = "figures",
url_images = "figures/",
out_ext='.md',
in_ext='.rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
for(f in files) {
message(paste("Processing ", f, sep=''),encoding = "UTF-8")
content <- readLines(file.path(path_site,dir_rmd,f))
# If any html calls, replace the src=figures/... with src=/figures/...
src.idx <- grep('src=',content,value=F)
if (length(src.idx)>0) {
content[src.idx] <- gsub('src=\"figures','src=\"/figures',content[src.idx])
} else {}
frontMatter <- which(substr(content, 1, 3) == '---')
if(length(frontMatter) >= 2 & 1 %in% frontMatter) {
statusLine <- which(substr(content, 1, 7) == 'status:')
publishedLine <- which(substr(content, 1, 10) == 'published:')
if(statusLine > frontMatter[1] & statusLine < frontMatter[2]) {
status <- unlist(strsplit(content[statusLine], ':'))[2]
status <- sub('[[:space:]]+$', '', status)
status <- sub('^[[:space:]]+', '', status)
if(tolower(status) == 'process') {
#This is a bit of a hack but if a line has zero length (i.e. a
#black line), it will be removed in the resulting markdown file.
#This will ensure that all line returns are retained.
content[nchar(content) == 0] <- ' '
message(paste('Processing ', f, sep=''))
content[statusLine] <- 'status: publish'
content[publishedLine] <- 'published: true'
#andy change to path
outFile <- file.path(path_site, dir_md, paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
#render_markdown(strict=TRUE)
#render_markdown(strict=FALSE) #code didn't render properly on blog
#andy change to render for jekyll
render_jekyll(highlight = "pygments")
#render_jekyll(highlight = "prettify") #for javascript
opts_knit$set(out.format='markdown')
# andy BEWARE don't set base.dir!! it caused me problems
# "base.dir is never used when composing the URL of the figures; it is
# only used to save the figures to a different directory.
# The URL of an image is always base.url + fig.path"
# https://groups.google.com/forum/#!topic/knitr/18aXpOmsumQ
# Get data directory
opts_knit$set(root.dir = dir_rmd)
opts_knit$set(base.url = "/")
# opts_knit$set(fig.width = 10)
opts_chunk$set(fig.path = url_images)
# opts_chunk$set(fig.width = 10)
#andy I could try to make figures bigger
#but that might make not work so well on mobile
opts_chunk$set(fig.width  = 8.5,
fig.height = 7.5,
dpi=300)
try(knit(text=content, output=outFile,encoding = "UTF-8"), silent=FALSE)
} else {
warning(paste("Not processing ", f, ", status is '", status,
"'. Set status to 'process' to convert.", sep=''))
}
} else {
warning("Status not found in front matter.")
}
} else {
warning("No front matter found. Will not process this file.")
}
}
invisible()
}
setwd("C:/Users/erikinwest/Documents/bioeconometrician/github/erikdrysdale.github.io/")
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
rmd2md()
get_legend(p2)
set.seed(1)
n <- 20 # Number of patients
alpha <- 1.5
X <- data.frame(patient=str_c('id',1:n),iota=rep(1,n),treatment=sample(c(0,1),n,replace=T))
beta <- c(1,2)
# Generate observed survival times
t.obs <- rweibull(n,shape=1.5,scale=(as.matrix(X[,c('iota','treatment')])%*%beta))
X.obs <- cbind(t.obs,X)
set.seed(1)
# Select with uniform probality the time to event
censor.obs <- X.obs %>% sample_n(10) %>% rowwise() %>%
mutate(t.true=t.obs,t.obs=runif(1,min=0,max=t.obs),censor=T)
censor.obs <- rbind(censor.obs,X.obs %>%
filter(!(patient %in% censor.obs$patient)) %>% mutate(censor=F,t.true=t.obs))
cp1 <- 6
# Same plot as before but with censoring
p1 <-
ggplot(censor.obs,aes(y=t.obs,x=fct_reorder(patient,t.obs),color=factor(treatment))) +
coord_flip() + geom_point(aes(shape=censor)) + theme_cowplot(font_size=cp1) +
scale_color_discrete(name='',labels=c('No Treatment','Received Treatment')) +
geom_linerange(aes(ymin=0,ymax=t.obs)) +
theme(axis.ticks.y=element_blank(),axis.text.y=element_blank(),legend.position=c(0.7,0.45)) +
scale_shape_manual(name='Censored',labels=c('No','Yes'),values=c(21,4)) +
labs(y='Survival time',x='Patients',subtitle='Black line shows true time') +
geom_linerange(aes(ymin=t.obs,ymax=t.true),color='black',linetype=2)
# Show the means with and without censoring
dat2 <- censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Observed=mean(t.obs),True=mean(t.true)) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1')) %>%
gather(var,val,-treatment)
# Plot
cp2 <- 7
p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Mean',subtitle='',x='') + scale_fill_manual(name='',values=c("#00BFC4","#C77CFF")) +
theme(legend.position=c(0.25,0.75))
get_legend(p2)
q=get_legend(p2)
q
plot_grid(q)
p2 + theme(legend.position='none')
?get_legend
p2 + guide(fill=F)
p2 + guides(fill=F)
p2
p1+ guides(fill=F)
p1+ guides(scale=F)
p1+ guides(scales=F)
p1+ guides(color=F)
?guides
p1 + guides(color=guide_legend(label.position = c(0.5,0.5)))
p1
p1 + guides(color=guide_legend(label.vjust = -0.5))
p1 + guides(color=guide_legend(label.vjust = -0.5,title.vjust = -0.5))
p1 + guides(color=guide_legend(keyheight = 0.1))
p1 + guides(shape=guide_legend(keyheight = 0.5))
rmd2md()
censor.obs
censor.obs %>% filter(!censor) %>% data.frame %>% group_by(treatment)  %>%
summarise(Observed=mean(t.obs),True=mean(t.true)) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1')) %>%
gather(var,val,-treatment)
censor.obs
censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Observed=mean(t.true*ifelse(censor,0,1)),True=mean(t.true)) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1')) %>%
gather(var,val,-treatment)
dat2 <- censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Observed=mean(t.true*ifelse(censor,0,1)),True=mean(t.true)) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1')) %>%
gather(var,val,-treatment)
# Plot
cp2 <- 7
p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='',x='') + scale_fill_manual(name='',values=c("#00BFC4","#C77CFF")) +
theme(legend.position=c(0.25,0.75))
# p1 + guides(shape=guide_legend(keyheight = 0.5))
q=get_legend(p2)
# Combine
plot_grid(p1 + guides(shape=guide_legend(keyheight = 0.5)),p2,ncol=2,labels=c('A','B'),label_size = 10)
# Show the means with and without censoring
dat2 <- censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Dead.Average=mean(t.true*ifelse(censor,0,1)),
All.Average=mean(t.obs),
True.Average=mean(t.true)) %>%
gather(var,val,-treatment) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1'),
var=gsub('.Average','',var))
# Plot
cp2 <- 7
# p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='Observed uses dead patients',x='') + scale_fill_manual(name='Average',values=c("#00BFC4","#C77CFF")) +
theme(legend.position=c(0.25,0.75))
# p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='Observed uses dead patients',x='') +
scale_fill_manual(name='Average') +
theme(legend.position=c(0.25,0.75))
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='Observed uses dead patients',x='') +
scale_fill_discrete(name='Average') +
theme(legend.position=c(0.25,0.75))
dat2 <- censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Dead.Average=mean(t.true*ifelse(censor,0,1)),
All.Average=mean(t.obs),
True.Average=mean(t.true)) %>%
gather(var,val,-treatment) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1'),
var=gsub('.Average','',var) %>% fct_relevel(c(2,1,3)))
# Plot
cp2 <- 7
# p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='Observed uses dead patients',x='') +
scale_fill_discrete(name='Average') +
theme(legend.position=c(0.25,0.75))
?fct_relevel
dat2 <- censor.obs %>% data.frame %>% group_by(treatment)  %>%
summarise(Dead.Average=mean(t.true*ifelse(censor,0,1)),
All.Average=mean(t.obs),
True.Average=mean(t.true)) %>%
gather(var,val,-treatment) %>%
mutate(treatment=fct_recode(factor(treatment),'No Treatment'='0','Treatment'='1'),
var=gsub('.Average','',var) %>% lvls_reorder(c(2,1,3)))
# Plot
cp2 <- 7
# p2 <-
ggplot(dat2,aes(x=treatment,fill=var,y=val)) +
theme_cowplot(font_size=cp2) +
geom_bar(stat='identity',color='black',position = position_dodge()) +
labs(y='Average time',subtitle='Observed uses dead patients',x='') +
scale_fill_discrete(name='Average') +
theme(legend.position=c(0.25,0.75))
dev.off()
rmd2md()
rmd2md()
